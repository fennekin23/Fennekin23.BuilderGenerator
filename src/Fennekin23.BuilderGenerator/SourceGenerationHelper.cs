using System.Text;
using Fennekin23.BuilderGenerator.Metadata;

namespace Fennekin23.BuilderGenerator;

public static class SourceGenerationHelper
{
    private const string Header = 
"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Fennkin23.BuilderGnerator source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

""";

    public const string Attribute = Header +
"""
namespace Fennekin23.BuilderGenerator
{
    /// <summary>
    /// Add to records to indicate that builder should be generated for the type
    /// </summary>
    [global::System.AttributeUsage(global::System.AttributeTargets.Class)]
#if NET5_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated by the Fennkin23.BuilderGnerator source generator.")]
#else
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
#endif
    public class BuilderGeneratorAttribute : global::System.Attribute
    {
    }
}
""";

    public static string GenerateBuilderClass(StringBuilder sb, in ItemToGenerate item)
    {
        var builderClassName = $"{item.Name}Builder";
        
        sb.Append(Header)
            .AppendLine();
        
        if (!string.IsNullOrEmpty(item.NameSpace))
        {
            sb.AppendFormat(
                    """
                    namespace {0}
                    {{
                    """, item.NameSpace)
                .AppendLine();
        }

        sb.AppendFormat(
                """
                    /// <summary>
                    /// Builder class for <see cref="{0}" />
                    /// <summary>
                    {1} sealed partial class {2}
                    {{
                """, item.FullyQualifiedName, item.Accessibility, builderClassName)
            .AppendLine();
        
        foreach (var param in item.ConstructorParameters)
        {
            var fieldName = ToFieldName(param.Name);
            sb.AppendFormat(
                    """
                            private {0} {1} = default!;
                            public {2} With{3}({0} value)
                            {{
                                {1} = value;
                                return this;
                            }}
                    """, param.Type, fieldName, builderClassName, param.Name)
                .AppendLine();
        }

        sb.AppendFormat(
            """
                    public {0} Build()
                    {{
                        return new {0}({1});
                    }}
                }}
            }}
            """,
            item.FullyQualifiedName,
            string.Join(", ", item.ConstructorParameters.Select(i => $"{i.Name}: {ToFieldName(i.Name)}"))
            );
        
        return sb.ToString();
    }

    private static string ToFieldName(string value) => $"_{value.ToLowerInvariant()}";
}