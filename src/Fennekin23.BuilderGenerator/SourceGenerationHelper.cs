using System.Text;
using Fennekin23.BuilderGenerator.CodeBuilder;
using Fennekin23.BuilderGenerator.Metadata;

namespace Fennekin23.BuilderGenerator;

public static class SourceGenerationHelper
{
    public static string GenerateAttributeClass()
    {
        StringBuilder sb = new();
        
        SourceFileBuilder sfb = new (sb);
        sfb.AddHeader();
        sfb.EnableNullable();
        sfb.AddNamespace(nb => nb
            .WithName("Fennekin23.BuilderGenerator")
            .WithBody(nb => nb
                .AddClass(cb => cb
                    .WithComment("""
                                     /// <summary>"
                                     ///     Add to record or class to indicate that builder should be generated for the type.
                                     /// </summary>
                                 """)
                    .WithAttribute(
                        "[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = \"Generated by the Fennekin23.BuilderGenerator source generator.\")]")
                    .WithAccessModifier("public")
                    .WithName("BuilderGeneratorAttribute : global::System.Attribute")
                    .WithBody())));

        return sb.ToString();
    }
    
    public static string GenerateBuilderClass(in ItemToGenerate item)
    {
        var currentItem = item;
        
        StringBuilder sb = new();
        var builderClassName = $"{item.Name}Builder";
        
        SourceFileBuilder sfb = new (sb);
        sfb.AddHeader();
        sfb.EnableNullable();
        // ---------- namespace ----------
        sfb.AddNamespace(nb => nb
            .WithName(currentItem.NameSpace)
            .WithBody(nb => nb
                // ---------- class ----------
                .AddClass(cb => cb
                    .WithComment($"""
                                      /// <summary>
                                      ///    Builder class for <see cref="{currentItem.FullyQualifiedName}" />.
                                      /// </summary>
                                  """)
                    .WithAccessModifier(currentItem.Accessibility)
                    .WithModifiers("sealed", "partial")
                    .WithName(builderClassName)
                    .WithBody(cb =>
                    {
                        foreach (var param in currentItem.ConstructorParameters)
                        {
                            string backingFiledName = ToFieldName(param.Name);

                            cb.AddField(fb => fb
                                .WithAccessModifier("private")
                                .WithType(param.Type)
                                .WithName(backingFiledName)
                                .WithValue("default!"));

                            cb.AddMethod(mb => mb
                                .WithAccessModifier("public")
                                .WithReturnType(builderClassName)
                                .WithName($"With{param.Name}")
                                .WithParameter(new KeyValuePair<string, string>(param.Type, "value"))
                                .WithBody(bb => bb
                                    .WithStatements([$"{backingFiledName} = value;"],
                                        rb => rb.WithSelfResult())));
                        }

                        foreach (var param in currentItem.Properties)
                        {
                            string backingFiledName = ToFieldName(param.Name);

                            cb.AddField(fb => fb
                                .WithAccessModifier("private")
                                .WithType(param.Type)
                                .WithName(backingFiledName)
                                .WithValue("default!"));

                            cb.AddMethod(mb => mb
                                .WithAccessModifier("public")
                                .WithReturnType(builderClassName)
                                .WithName($"With{param.Name}")
                                .WithParameter(new KeyValuePair<string, string>(param.Type, "value"))
                                .WithBody(bb => bb
                                    .WithStatements([$"{backingFiledName} = value;"],
                                        rb => rb.WithSelfResult())));
                        }

                        cb.AddMethod(mb => mb
                            .WithAccessModifier("public")
                            .WithReturnType(currentItem.FullyQualifiedName)
                            .WithName("Build")
                            .WithoutParameters()
                            .WithBody(bb => bb
                                .WithStatements(
                                    [],
                                    rb =>
                                    {
                                        rb.WithObjectResult(ob => ob
                                            .WithType(currentItem.FullyQualifiedName)
                                            .WithConstructorParameters(
                                                currentItem.ConstructorParameters
                                                    .Select(i =>
                                                        new KeyValuePair<string, string>(i.Name, ToFieldName(i.Name)))
                                                    .ToArray()
                                            )
                                            .WithPropertiesInitializer(
                                                currentItem.Properties
                                                    .Select(i =>
                                                        new KeyValuePair<string, string>(i.Name, ToFieldName(i.Name)))
                                                    .ToArray()
                                            ));
                                    })));
                    }))));
        
        return sb.ToString();
    }

    private static string ToFieldName(string value) => $"_{value.ToLowerInvariant()}";
}