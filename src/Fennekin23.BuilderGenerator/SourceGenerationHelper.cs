using System.Text;
using Fennekin23.BuilderGenerator.CodeBuilder;
using Fennekin23.BuilderGenerator.Metadata;

namespace Fennekin23.BuilderGenerator;

public static class SourceGenerationHelper
{
    public static string GenerateAttributeClass()
    {
        StringBuilder sb = new();
        
        SourceFileBuilder sfb = new SourceFileBuilder(sb);
        sfb.AddHeader();
        sfb.EnableNullable();
        using (var nsb = sfb.CreateNamespaceBuilder())
        {
            nsb.DefineNamespace("Fennekin23.BuilderGenerator");
            using (var cb = nsb.CreateClassBuilder())
            {
                cb.AddComment(
                    """
                        /// <summary>"
                        ///     Add to record or class to indicate that builder should be generated for the type.
                        /// </summary>
                    """
                    );
                cb.AddRaw("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = \"Generated by the Fennekin23.BuilderGenerator source generator.\")]");
                cb.DefineClass("public","BuilderGeneratorAttribute : global::System.Attribute");
            }
        }

        return sb.ToString();
    }
    
    public static string GenerateBuilderClass(in ItemToGenerate item)
    {
        StringBuilder sb = new();
        var builderClassName = $"{item.Name}Builder";
        
        SourceFileBuilder sfb = new SourceFileBuilder(sb);
        sfb.AddHeader();
        sfb.EnableNullable();
        using (var nsb = sfb.CreateNamespaceBuilder())
        {
            nsb.DefineNamespace(item.NameSpace);
            using (var cb = nsb.CreateClassBuilder())
            {
                cb.AddComment(
                    $"""
                        /// <summary>
                        ///    Builder class for <see cref="{item.FullyQualifiedName}" />.
                        /// </summary>
                    """);
                
                cb.DefinePartialClass(item.Accessibility, builderClassName);

                foreach (var param in item.ConstructorParameters)
                {
                    string backingFiledName = ToFieldName(param.Name);
                    
                    using (var fb = cb.CreateFieldBuilder(
                               "private",
                               param.Type,
                               backingFiledName))
                    {
                        fb.StartField();
                    }
                    
                    using (var mb = cb.CreateMethodBuilder(
                               "public", 
                               builderClassName, 
                               $"With{param.Name}",
                               [new KeyValuePair<string, string>(param.Type, "value")]))
                    {
                        mb.StartMethod();
                        mb.Body($"{backingFiledName} = value;");
                        mb.Return("this;");
                    }
                }
                
                foreach (var param in item.Properties)
                {
                    string backingFiledName = ToFieldName(param.Name);
                    
                    using (var fb = cb.CreateFieldBuilder(
                               "private",
                               param.Type,
                               backingFiledName))
                    {
                        fb.StartField();
                    }
                    
                    using (var mb = cb.CreateMethodBuilder(
                               "public", 
                               builderClassName, 
                               $"With{param.Name}",
                               [new KeyValuePair<string, string>(param.Type, "value")]))
                    {
                        mb.StartMethod();
                        mb.Body($"{backingFiledName} = value;");
                        mb.Return("this;");
                    }
                }
                
                using (var mb = cb.CreateMethodBuilder("public", item.FullyQualifiedName, "Build"))
                {
                    var currentItem = item;
                    mb.StartMethod();
                    mb.ReturnObjectResult(ob =>
                        ob
                            .WithType(currentItem.FullyQualifiedName)
                            .WithConstructorParameters(
                                currentItem.ConstructorParameters
                                    .Select(i => new KeyValuePair<string, string>(i.Name, ToFieldName(i.Name)))
                                    .ToArray()
                            )
                            .WithPropertiesInitializer(
                                currentItem.Properties
                                    .Select(i => new KeyValuePair<string, string>(i.Name, ToFieldName(i.Name)))
                                    .ToArray()
                            ));
                }
            }
        }
        
        return sb.ToString();
    }

    private static string ToFieldName(string value) => $"_{value.ToLowerInvariant()}";
}